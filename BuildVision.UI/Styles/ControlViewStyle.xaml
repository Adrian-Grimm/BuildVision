<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:BuildVision.UI.Styles"
                    xmlns:vsfx="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.15.0"
                    xmlns:converters1="http://schemas.microsoft.com/xps/2005/06"
                    xmlns:converters="clr-namespace:AlekseyNagovitsyn.BuildVision.Tool.Views.Converters">

    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowTextKey}}" />
    </Style>

    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowTextKey}}" />
        <Setter Property="Background"
                Value="{DynamicResource {x:Static vsfx:VsBrushes.ComboBoxBackgroundKey}}" />
    </Style>

    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowTextKey}}" />
        <Setter Property="Background"
                Value="{DynamicResource {x:Static vsfx:VsBrushes.ComboBoxBackgroundKey}}" />
        <Style.Triggers>
            <Trigger Property="IsHighlighted"
                     Value="true">
                <Setter Property="Background"
                        Value="{DynamicResource {x:Static vsfx:VsBrushes.ComboBoxMouseOverBackgroundGradientKey}}" />
                <Setter Property="Foreground"
                        Value="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarTextHoverKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="IndicatorLabel">

        <Setter
            Property="Label.Foreground"
            Value="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowTextKey}}" />

        <Style.Triggers>
            <DataTrigger
                Binding="{Binding IsEnabled}"
                Value="false">
                <Setter
                    Property="Label.Opacity"
                    Value="0.4" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="DataGridCell" x:Key="DataGridCell">
        <Style.Triggers>

            <Trigger Property="IsSelected"
                     Value="True">
                <Setter Property="Background"
                        Value="Transparent" />
                <Setter Property="Foreground"
                        Value="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowTextKey}}" />
            </Trigger>

            <!--
                            <DataTrigger Binding="{Binding ErrorsCount, Converter={StaticResource NumberIsPositive}}" Value="True">
                            <Setter Property="Background" Value="PaleVioletRed" />
                            <Setter Property="Foreground" Value="Black" />
                            </DataTrigger>
                        -->

        </Style.Triggers>


        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridCell">
                    <Border Background="{TemplateBinding Panel.Background}"
                            BorderBrush="{TemplateBinding Border.BorderBrush}"
                            BorderThickness="0"
                            SnapsToDevicePixels="True">
                        <!--  BorderThickness="{TemplateBinding Border.BorderThickness}"  -->
                        <ContentPresenter Margin="1,0,0,0"
                                          VerticalAlignment="Center"
                                          Content="{TemplateBinding ContentControl.Content}"
                                          ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                                          ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <converters1:BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter" />
    <converters:VisibilityToBooleanConverter x:Key="VisibilityToBoolConverter" />
    <converters:GridColumnHeadersVisibilityToBooleanConverter x:Key="ColumnHeadersVisibilityToBool" />
    <converters:InverseBooleanConverter x:Key="InverseBoolean" />
    <converters:IndicatorVectorIconConverter x:Key="IndicatorVectorIconConverter" />
    <converters:ObjectsReferencesEqualsConverter x:Key="ObjectsReferencesEqualsConverter" />
    <converters:IsErrorToBorderThicknessConverter x:Key="IsErrorToBorderThicknessConverter" />
    <converters:StringIsNullOrEmptyConverter x:Key="StringIsNullOrEmptyConverter" />
    <converters:SubtractConstantConverter x:Key="SubtractConstantConverter" />
    <converters:ExpanderIsExpandedConverter x:Key="ExpanderIsExpandedConverter" />

    <converters:AlternatingRowBackgroundConverter x:Key="AlternatingRowBackgroundConverter" />

    <converters:MultiBindingStringFormatConverter x:Key="MultiBindingStringFormatConverter" />
    
    <converters:ValueConverterGroup x:Key="InvertedBoolToVisibilityConverter">
        <converters:InverseBooleanConverter />
        <converters1:BooleanToVisibilityConverter />
    </converters:ValueConverterGroup>

    <converters:ValueConverterGroup x:Key="NotNullToVisibilityConverter">
        <converters:ObjectToIsNullConverter />
        <converters:InverseBooleanConverter />
        <converters1:BooleanToVisibilityConverter />
    </converters:ValueConverterGroup>

    <converters:ValueConverterGroup x:Key="IsSeparatorIndicatorToVisibilityConverter">
        <converters:IsSeparatorIndicatorConverter />
        <converters1:BooleanToVisibilityConverter />
    </converters:ValueConverterGroup>

    <converters:ValueConverterGroup x:Key="IsSeparatorIndicatorToNotVisibilityConverter">
        <converters:IsSeparatorIndicatorConverter />
        <converters:InverseBooleanConverter />
        <converters1:BooleanToVisibilityConverter />
    </converters:ValueConverterGroup>

    <converters:ValueConverterGroup x:Key="PositiveNumberToVisibilityConverter">
        <converters:NumberToIsPositiveConverter />
        <BooleanToVisibilityConverter />
    </converters:ValueConverterGroup>

</ResourceDictionary>